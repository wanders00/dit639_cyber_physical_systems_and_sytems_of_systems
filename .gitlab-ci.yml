# Copyright (C) 2024 Group 13 Dit639
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Which Docker image shall be used on the GitLab runner?
image: docker:26

# Details about how to connect to the Docker service to run this build.
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

services:
  - name: docker:26-dind

stages:
  - build
  - generate
  - analyze
  - deploy

# Display information before we start the build.
before_script:
  - docker info
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# This section describes what shall be done to build and test the project.
build-and-test:
  tags:
    - docker-build
  stage: build
  script:
    - docker build . --output . --target copytohost
  except:
    - tags
  coverage: '/Total:\|\s?(\d+\.?\d*%)/'
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build-images:
  tags:
    - docker-build
  stage: build
  script:
    - docker build -t $CI_REGISTRY_IMAGE/video-h264-replay -f Dockerfile https://github.com/chalmers-revere/opendlv-video-h264-replay.git#v0.0.4
    - docker push $CI_REGISTRY_IMAGE/video-h264-replay
    - docker build -f Dockerfile -t $CI_REGISTRY_IMAGE/application .
    - docker push $CI_REGISTRY_IMAGE/application

# This section describes what shall be done to generate the CSV files for the performance analysis.
# This is a template that is used to generate the CSV files for the performance analysis.
.generate-csv-template: &generate-csv-template
  tags:
    - docker-build
  stage: generate
  dependencies:
    - build-and-test
    - build-images
  script:
    - docker pull $CI_REGISTRY_IMAGE/video-h264-replay
    - docker pull $CI_REGISTRY_IMAGE/application
    - echo "Processing $FILE.rec"
    - docker run -d --rm -ti --net=host --ipc=host -e DISPLAY=$DISPLAY -v /tmp:/tmp -v $(pwd)/recordings:/recordings --name=replay-$FILE $CI_REGISTRY_IMAGE/video-h264-replay --cid=111 --name=img /recordings/$FILE.rec
    - sleep 1
    - docker run -d --net=host --ipc=host -e DISPLAY=$DISPLAY -v /tmp:/tmp --name=application-$FILE $CI_REGISTRY_IMAGE/application:latest --cid=111 --name=img --width=640 --height=480 --output=$FILE.csv
    - while docker ps | grep -q replay-$FILE; do sleep 1; done
    - mkdir -p ./verifier/csv/
    - docker cp application-$FILE:./opt/$FILE.csv ./verifier/csv/$FILE.csv
    - docker stop application-$FILE || true && docker rm application-$FILE || true
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-csv"
    paths:
      - ./verifier/csv/*.csv
    expire_in: 1 week
  allow_failure: true

# Use the template to generate the CSV files for the performance analysis.
generate-csv-144821:
  <<: *generate-csv-template
  variables:
    FILE: "144821"

generate-csv-145043:
  <<: *generate-csv-template
  variables:
    FILE: "145043"

generate-csv-145233:
  <<: *generate-csv-template
  variables:
    FILE: "145233"

generate-csv-145641:
  <<: *generate-csv-template
  variables:
    FILE: "145641"

generate-csv-150001:
  <<: *generate-csv-template
  variables:
    FILE: "150001"

# This section describes what shall be done to analyze the CSV files for the performance analysis.
analyze-performance:
  tags:
    - docker-build
  stage: analyze
  dependencies:
    - generate-csv-144821
    - generate-csv-145043
    - generate-csv-145233
    - generate-csv-145641
    - generate-csv-150001
  script:
    - if [ ! "$(ls -A ./verifier/csv)" ]; then echo "No CSV files generated, exiting..."; exit 1; fi
    - cd verifier
    - mkdir output
    - docker build -f Dockerfile.verifier -t performance_tester . --output ./output/
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-performance"
    paths:
      - ./verifier/output/*.png
  when: always

# This section describes what shall be done to deploy artifacts from the project.
release:
  # This runs only when we have a push to a branch that has a tag (it's a release), the tag must follow the semantic versioning
  # should only run when the branch is tested successfully
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/ # This is a regular expression that matches semantic versioning
  
  tags:
    - docker-build
  
  stage: deploy
  # This job depends on the build-and-test job.
  # Will only run if the build-and-test job is successful.
  dependencies:
    - build-and-test
  
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_CLI_EXPERIMENTAL: enabled
    BUILDX_URL: https://github.com/docker/buildx/releases/download/v0.7.1/buildx-v0.7.1.linux-amd64
    BUILDX_BUILDER: platformbuilder
    BUILDX_PLATFORM: linux/amd64,linux/arm/v7
  
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - wget -O ~/.docker/cli-plugins/docker-buildx $BUILDX_URL
    - chmod 755 ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use --driver docker-container --name $BUILDX_BUILDER --platform=${BUILDX_PLATFORM}
    - docker buildx inspect --bootstrap ${BUILDX_BUILDER}
    - docker buildx ls df -h
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  
  script:
    # - docker build -f Dockerfile -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" .
    # - docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG"
    - docker buildx build --platform $BUILDX_PLATFORM -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" --push .